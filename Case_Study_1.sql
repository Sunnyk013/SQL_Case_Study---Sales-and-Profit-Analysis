use Case_Study_1

select * from dbo.fact
select * from dbo.Product
select * from dbo.Location

---1. Display the number of states present in the LocationTable.---
SELECT COUNT(DISTINCT State) AS NumberOfStates
FROM dbo.Location;


---2. How many products are of regular type?---
SELECT COUNT(*) AS NumberOfRegularProducts
FROM dbo.Product
WHERE Type = 'Regular';

---3. How much spending has been done on marketing of product ID 1?
select SUM(Marketing) as TotalMarketingSpending
from dbo.fact
where ProductId = 1

---4. What is the minimum sales of a product?---
select MIN(Sales) as MinimumSalesOfaProduct
from dbo.fact

---5. Display the max Cost of Good Sold (COGS).---
select MAX(COGS) as MaxCostOfGoodSold
from dbo.fact

---6. Display the details of the product where product type is coffee.
select * from dbo.Product where Product_Type = 'coffee'

---7. Display the details where total expenses are greater than 40.
select * from dbo.fact where Total_Expenses > 40

---8. What is the average sales in area code 719?
select AVG(Sales) as average_sales from dbo.fact where Area_Code = '719'

---9. Find out the total profit generated by Colorado state.
select SUM(Profit) as Total_Profit
from fact ft
join Location lt on ft.Area_Code = lt.Area_Code
where lt.State = 'Colarado'

---10. Display the average inventory for each product ID.---
SELECT ProductID, AVG(Inventory) AS AverageInventory
FROM fact
GROUP BY ProductID order by ProductID;

---11. Display state in a sequential order in a Location Table.---
select * from Location order by State
select State from Location order by State

---12. Display the average budget of the Product where the average budgetmargin should be greater than 100.
select ProductId, AVG(Budget_Profit) as Avg_Bud_Pro
from fact
group by ProductId
Having AVG(Budget_Margin) > 100

---13. What is the total sales done on date 2010-01-01?---
select Date, SUM(Sales) as total_sales 
from fact where Date = '2010-01-01'
group by Date

---14. Display the average total expense of each product ID on an individual date.
select Date, ProductId, AVG(Total_Expenses) as avg_total_expense
from fact
group by Date, ProductId order by ProductId

---15. Display the table with the following attributes such as date, productID,
--- product_type, product, sales, profit, state, area_code.
SELECT 
    ft.Date,
    ft.ProductID,
    pt.Product_Type,
    pt.Product,
    ft.Sales,
    ft.Profit,
    lt.State,
    lt.Area_Code
FROM Fact ft
JOIN Product pt ON ft.ProductID = pt.ProductID
JOIN Location lt ON ft.Area_Code = lt.Area_Code;

---16. Display the rank without any gap to show the sales wise rank.
select DATE, ProductId, Sales,
DENSE_RANK() over (order by Sales Desc) as Sales_Rank
from fact

---17. Find the state wise profit and sales.
select lt.State,
sum(ft.Profit) as Total_Profit,
sum(ft.Sales) as Total_Sales
from fact ft
join location lt on ft.Area_Code = lt.Area_Code
group by lt.State

---18. Find the state wise profit and sales along with the product name
select lt.State, pt.Product,
SUM(ft.profit) as total_profit,
sum(ft.Sales) as total_sales
from fact ft
join Location lt on ft.Area_Code = lt.Area_Code
join Product pt on ft.ProductId = pt.ProductId
group by pt.Product, lt.State;

---19. If there is an increase in sales of 5%, calculate the increasedsales.
select DATE, ProductId, Sales,
Sales * 1.05 as Increased_Sales
from fact

---20. Find the maximum profit along with the product ID and producttype
select ft.ProductId, pt.Product_Type, MAX(ft.Profit) as Max_Profit
from fact ft
join Product pt on ft.ProductId = pt.ProductId
group by ft.ProductId, pt.Product_Type

---21. Create a stored procedure to fetch the result according to the product type from Product Table.
create procedure Get_Products_by_Type
@ProductType nvarchar(50)
as
begin
select Product_Type
from Product
where Product_Type = @ProductType
End;

Exec Get_Products_by_Type @ProductType = 'Coffee';

alter procedure Get_Products_by_Type
@ProductType nvarchar(50)
as 
begin
select ProductId, Product_Type, Product
from Product
where Product_Type = @ProductType
End;

Exec Get_Products_by_Type @ProductType = 'Coffee';

Drop Procedure Get_Products_by_Type

select * from dbo.fact
select * from dbo.Product
select * from dbo.Location
--- 22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select ProductId, Date, Sales, Profit, Total_Expenses,
case
	when Total_Expenses < 60 then 'Profit'
	else 'Loss'
End as Profit_Loss
from fact 

--- 23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
--- option_01
select
	DATEPART(week, Date) as Week_Number
	ProductID,
	sum(Sales) as Total_Weekly_Sales
from fact
group by
	Rollup(DATEPART(week, Date), ProductId)
Order By
	Datepart(week, Date),
	ProdictId;

--- option_02
SELECT 
    DATEPART(WEEK, Date) AS WeekNumber,
    ProductID,
    SUM(Sales) AS TotalWeeklySales
FROM fact
GROUP BY 
    ROLLUP(DATEPART(WEEK, Date), ProductID)
ORDER BY 
    DATEPART(WEEK, Date), 
    ProductID;

---24. Apply union and intersection operator on the tables which consist of attribute area code.
--- Union
select Area_Code from fact
union
select Area_Code from Location

---Intersect
select Area_Code from fact
intersect
select Area_Code from Location

---25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
drop function dbo.GetProductsByType

CREATE FUNCTION dbo.GetProductsByType
(
    @ProductType NVARCHAR(50)
)
RETURNS TABLE
AS
RETURN
(
    SELECT 
        ProductID, 
        Product_Type, 
        Product, 
        Type
    FROM Product
    WHERE Product_Type = @ProductType
);

select * from dbo.GetProductsByType('Herbal Tea')

---26. Change the product type from coffee to tea where product ID is 1 and undo it.
select * from Product
update Product
set Product_Type = 'Tea' 
where ProductID = 1 and Product_Type = 'Coffee';

--- undo or revert the product type to 'coffee'
update Product
set Product_Type = 'Coffee' 
where ProductID = 1 and Product_Type = 'Tea';
select * from Product

---27. Display the date, product ID and sales where total expenses are between 100 to 200.
select Date, ProductId, Sales from fact
where Total_Expenses between 100 and 200

---28. Delete the records in the Product Table for regular type
select * from Product

Begin Transaction
	delete from Product where Type = 'Regular'
	select * from Product;

RollBack Transaction;
---commit transaction

---29. Display the ASCII value of the fifth character from the columnProduct drop table Product
select 
	Product,
	ASCII(substring(Product, 5, 1)) as FifthCharacterASCII
from Product

---Drop table Product